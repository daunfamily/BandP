(!************************************************************************
   The pricing problem for the B&B algorirthm
   ======================

   file GAPsubDP.mos
   `````````````````
   DESCRIPTION:  Shortest Path Problem be used with Branch-and-Price
   FEATURES:     mmjobs, Mosel records.

   FURTHER INFO:
       author: Paul Chatelain (2020) - paul.chatelain.at.uclouvain.be
*************************************************************************!)



model GAPsubDP

    uses "mmxprs", "mmjobs", "mmsystem"


    parameters
        FLIGHTS = 10
        TOL = 0.00001
    end-parameters

    !writeln("On est dans le pricing problem")

    !Initiolizations of general parameters
    declarations
     GS,NbP,NbF,NbN, NbA,NbZ, NL, NC,SN: integer
    end-declarations

    fopen("Params2.dat",F_INPUT)                                            ! Open the file F for reading
    !writeln("Reading file `","Params2.dat","'...")
    readln(GS,NbP,NbF,NbN, NbA,NbZ, NL, NC,SN)




    forward procedure solve_SP_DP(FL:real)
    forward procedure return_resultDP
    forward procedure process_solutionDP
    forward procedure new_nodeDP
    forward procedure fix_arc
    forward procedure get_short_path
    forward procedure print_status


    declarations
        EVENT_GEN_INI_COLS=2     ! Event codes sent to submodels
        EVENT_GEN_COLS=3
        EVENT_STOP_SUBMOD=5
        EVENT_NEW_NODE=9

        EVENT_SOLVED=6           ! Event codes sent by submodels
        EVENT_FAILED=7
        EVENT_READY=8
        EVENT_INFEAS=11
    end-declarations

    send(EVENT_READY,0)        ! Model is ready (= running)



   declarations
    Nodes= 1..SN
    Arcs= 1..NbA
    Zones= 1..NbZ
    Flights= 1..NbF

    WeightZone:  array(Zones) of integer
    Successor:  array(Nodes) of list of integer
    Predecessor: array(Nodes) of list of integer
    ImpactMatrix: array(Flights) of array(Arcs) of dynamic array(1..2) of array(1..2) of integer
    ArrivalNodeList: array(Arcs) of integer
    ArcCap: array(Arcs) of integer

    var_path: array(Arcs) of mpvar                                      ! variable of the SP: 1 if arc a is selected, 0 otherwise.


    Dual_sigma: array(Arcs) of real                                     ! Dual values of Cons_ArcCap received from Master.
    Dual_gamma: real                                                    ! Dual value of Cons_MaxPath received from Master.
    Dual_lambda: array(Flights) of real                                 ! Dual value of Cons_Flow received from Master.
    Dual_psi: array(Arcs) of real                                       ! Dual value  received from Master.


    obj_val: real                                                       ! To return to the master. Value of the objective function.
    min_cap_path: real                                                  ! To return to the master. Minimal cap of the new path.
    tot_impact_NP: array(Flights) of real                               ! To return to the master. Impact of the path for each flight.
    new_path_short: list of integer                                     ! To return to the master. List which contains all the arc in the path.
    FLa: integer


    cons_to_fix: array(range) of linctr                                 ! Constraints to force the fixed variable to be equal to zero


  !Data structure to fix variables that is passed from Master problem
  !*****************************************************************

  Fixed=
    record
      var:    integer
      to_zero:boolean
    end-record

  fixed_vars: array(1..NbA) of Fixed
  Nfixed: integer
 end-declarations



 initializations from "bin:shmem:data"
    WeightZone
    ImpactMatrix
    Successor
    Predecessor
    ArcCap
 end-initializations


  ! Checker cette partie
  KSIZE:=100

 declarations
   EXCLUDE: set of integer
   FIXEDTO1: set of integer
   !VALUE: array(PRODS) of real
   !ACTIVE: array(PRODS) of integer
   !kost: array(0..NP,0..KSIZE) of real
   !best: array(0..NP,0..KSIZE) of boolean
   kobj: real
 end-declarations


EXCLUDE:= {}




 FIXEDTO1:={}
 ! Checker jusqu'ici....


!**************** Process Event Messages from Master ***********************
 repeat
   wait
   ev:= getnextevent
   event:= getclass(ev)
   FL:= getvalue(ev)

   case event of

    EVENT_GEN_COLS:do
      initializations from "bin:shmem:Price"
         Dual_sigma
         Dual_gamma
         Dual_lambda
        Dual_psi
      end-initializations
      fix_arc
      solve_SP_DP(FL)

    end-do

    EVENT_NEW_NODE:
      new_nodeDP

    EVENT_STOP_SUBMOD:
      break
  end-case

 until false


!****************************************************
!******************PROCEDURES************************
!****************************************************


!*****************************************************************
    procedure solve_SP_DP(FL:real)

    FLa:=integer(FL)

    SPObj:= sum(a in Arcs, j in 1..getsize(ImpactMatrix(FLa,a))) (WeightZone(ImpactMatrix(FLa,a,j,1))*ImpactMatrix(FLa,a,j,2) - Dual_sigma(a)- Dual_psi(a))*var_path(a)       ! Objective of the pricing problem
    OutFlow:= sum(i in Successor(NC)) var_path(i) = 1                                                                                                                         ! Constraint 1
    InFlow:= sum(i in Predecessor(SN)) var_path(i) = 1                                                                                                                        ! Constraint 2
    forall(n in Nodes | n <> SN  and n <> NC) FlowConservation(n) := sum(i in Predecessor(n)) var_path(i) = sum(i in Successor(n)) var_path(i)                                ! Constraint 3

    ! writeln("------------------------------------------")
    ! writeln("Solving the Pricing Problem for flight: ", FLa)
    ! writeln("------------------------------------------")
    minimize(SPObj)
    ! writeln("Pricing problem solved for flight: ", FLa ,", Objective Value: ", getobjval)
    !print_status

        return_resultDP
    end-procedure
!*****************************************************************


!*****************************************************************
    procedure fix_arc
        forall(i in 1..getsize(EXCLUDE)) do
            cons_to_fix(i) := var_path(EXCLUDE(i)) = 0
        end-do
    end-procedure
!*****************************************************************



!*****************************************************************
    procedure return_resultDP
        !Send message to the master problem with status of solution
        !writeln("Return Result of Pricing Problem")



        if getprobstat = 2 then                                                         ! Si le status du problème est "Solved to optimality"
            obj_val := getobjval
            !writeln("Problem Solved at optimality")
            if obj_val < (1/5)*Dual_gamma + Dual_lambda(FLa) then                       !!! Changer (1/4) par 1/u_k       ! Si le reduced cost est négatif:
                !writeln("A new path has been found for flight: ", FLa)
                send(EVENT_SOLVED, obj_val)
                process_solutionDP
            else
                !writeln("The Reduced Cost is not negative, solution cannot be improved")
                send(EVENT_FAILED, obj_val)
            end-if
        else
            !writeln("Problem NOT SOLVED")
            send(EVENT_FAILED, obj_val)
        end-if

    end-procedure
!*****************************************************************



!*****************************************************************
    procedure process_solutionDP

         get_short_path

         initializations to "mempipe:noindex,sol"
            tot_impact_NP
            min_cap_path
            new_path_short
            obj_val
         end-initializations

    new_path_short := []                                        ! On réinitialise à 0. Super important sinon les chemins sont gardés en mémoire
    forall(f in Flights) tot_impact_NP(f) := 0                  ! For each flight, create the parameter d_{l,k} which is the weight in the OF of RMP
    obj_val := 0

    end-procedure
!*****************************************************************



!*****************************************************************
    procedure get_short_path
        ! This procedure transform the solution of the shortest path
        ! Get the new path, the total impact and the minimal cap u_k

        min_cap_path := 100                                                                                     ! We define an upperbound on arc capacity
                                                                                         ! Create an array which will contain the arc which compose the path


        forall (a in Arcs) do
            new_path(a) := getsol(var_path(a))                                                                  ! Pour chaque arc, 0 ou 1. 1 si l'arc est dans le chemin alors....

            if new_path(a) = 1 then                                                                             ! On copie le numero de l'arc dans un vecteur
                new_path_short += [a]
                    forall(i in Flights) do
                        forall(j in  1..getsize(ImpactMatrix(i,a))) do                                          ! On calcul l'impact total du nouveau chemin pour chaque avions
                            tot_impact_NP(i) +=  WeightZone(ImpactMatrix(i,a,j,1))*ImpactMatrix(i,a,j,2)
                        end-do
                    end-do

                if ArcCap(a) <= min_cap_path then                                                               ! On calcule la lowest capacity du chemin
                    min_cap_path := ArcCap(a)
                end-if
            end-if
        end-do

    !writeln("Array of arc in the new path: ", new_path_short)
    !writeln("Total Impact of the new path: ", tot_impact_NP)


    end-procedure


!*****************************************************************
!*****************************************************************

    procedure new_nodeDP
        !writeln("Procedure New Node dans le pricing problem")


        forall(i in 1..getsize(cons_to_fix)) do                             ! We delete the previous constraint
          cons_to_fix(i) := 0
        end-do

        initializations from "bin:shmem:fixed"
          Nfixed
          fixed_vars
        end-initializations

        EXCLUDE:={}

        forall(a in 1..Nfixed) do
            if fixed_vars(a).to_zero then
                EXCLUDE  += {fixed_vars(a).var}
            end-if
        end-do

    end-procedure


!*****************************************************************
!*****************************************************************

procedure print_status
 declarations
  status: string
 end-declarations

 case getprobstat of
  XPRS_OPT: status:="Optimum found"
  XPRS_UNF: status:="Unfinished"
  XPRS_INF: status:="Infeasible"
  XPRS_UNB: status:="Unbounded"
  XPRS_OTH: status:="Failed"
  else status:="???"
 end-case

 writeln("Problem status: ", status)
end-procedure



end-model







    send(2,0)
    wait
    ev:= getnextevent
    event:= getclass(ev)